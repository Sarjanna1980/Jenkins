pipeline {
    agent any

    stages {
        stage('Deploy Containers') {
            steps {
                script {
                    def serverContainerId = sh(script: "docker run -d -p 3001:3001 --name reactapp_server guy66bp/reactapp_server", returnStdout: true).trim()
                    def frontContainerId = sh(script: "docker run -d -p 3000:3000 --name reactapp_front guy66bp/reactapp_front", returnStdout: true).trim()
                    
                    sh 'sleep 15' // Give the containers some time to start up
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    def pytestExitCode = sh(script: "docker run --rm guy66bp/reactapp_pytest", returnStatus: true)
                    
                    if (pytestExitCode != 0) {
                        error("Pytest failed with exit code: ${pytestExitCode}")
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Tests passed, pipeline succeeded!"
            cleanUpContainers()
        }

        failure {
            echo "Tests failed, pipeline failed!"
            cleanUpContainers()
        }
    }
}

def cleanUpContainers() {
    script {
        sh "docker stop reactapp_server reactapp_front"
        sh "docker rm reactapp_server reactapp_front"
    }
}
